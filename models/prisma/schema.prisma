// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoomTypes {
  JUNIOR_SUITE
  FAMILY_ROOM
  DOUBLE_ROOM
  DELAUX_ROOM
  SUPERIOR_ROOM
}

enum MenuTypes {
  STARTERS
  MAINS
  SALADS
  WINE
}

enum clubhouseTypes {
  SPA
  GYM
  HEALTHCLUB
}

enum ROLE {
  USER
  ADMIN
}

model Admin {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName       String
  email          String   @unique
  password       String
  username       String   @unique
  profilePic     String?
  birthDate      DateTime
  phoneNum       String   @unique
  isDeleted      Boolean  @default(false)
  emailConfirmed Boolean  @default(false)
  role           ROLE     @default(ADMIN)

  news         News[]
  contact      ContactUs[]
  restaurant   Restaurant[]
  AppSettings  AppSettings?
  ResetToken   ResetToken?
  ConfirmToken ConfirmToken?
  RefreshToken RefreshToken?
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fName          String
  lName          String
  username       String   @unique
  email          String   @unique
  password       String
  profilePic     String?
  birthDate      DateTime
  country        String
  nationalID     String   @unique
  isBlocked      Boolean  @default(false)
  isDeleted      Boolean  @default(false)
  emailConfirmed Boolean  @default(false)
  role           ROLE     @default(USER)

  room         RoomReservation[]
  review       Review?
  menu         Menu[]
  clubHouse    ClubHouse[]
  ResetToken   ResetToken?
  ConfirmToken ConfirmToken?
  RefreshToken RefreshToken?
}

model ResetToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  token    String
  userId   String?  @unique
  adminId  String?  @unique
  expireAt DateTime

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, userId], name: "adminId_userId_Resetindex")
}

model ConfirmToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  token    String
  userId   String?  @unique
  adminId  String?  @unique
  expireAt DateTime

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, userId], name: "adminId_userId_Confrimindex")
}

model RefreshToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  token    String
  userId   String?  @unique
  adminId  String?  @unique
  expireAt DateTime

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, userId], name: "adminId_userId_Refreshindex")
}

model Room {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomNum     String    @unique
  types       RoomTypes @default(JUNIOR_SUITE)
  price       String
  description String
  aminities   String[]
  images      String[]
  view        String
  isDeleted   Boolean   @default(false)

  extraServices ExtraServices[]
  user          RoomReservation[]
}

model RoomReservation {
  id     String @id @default(uuid())
  userId String
  roomId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checkIn   DateTime
  checkOut  DateTime
  adults    Int
  children  Int
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([roomId, userId])
}

model ExtraServices {
  id     String @id @default(uuid())
  roomId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  price      String
  facilities String[]
  isDeleted  Boolean  @default(false)

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Review {
  id     String @id @default(uuid())
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating    Float
  comment   String
  isDeleted Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id     String @id @default(uuid())
  adminId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String

  user Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  menu Menu[]
}

model Menu {
  id           String @id @default(uuid())
  userId       String
  restaurantId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menuTypes   MenuTypes
  name        String
  ingredients String
  price       String
  image       String
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model ClubHouse {
  id     String @id @default(uuid())
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubhouseTypes clubhouseTypes
  description    String
  startTime      DateTime
  endTime        DateTime
  isDeleted      Boolean        @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FAQS {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question  String
  answer    String
  isDeleted Boolean @default(false)
}

model News {
  id      String @id @default(uuid())
  adminId String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  subTitle    String
  description String
  images      String[]
  isDeleted   Boolean  @default(false)

  admin   Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  replies Reply[]
}

model Reply {
  id     String @id @default(uuid())
  newsId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName  String
  email     String
  comment   String
  isDeleted Boolean @default(false)

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
}

model ContactUs {
  id      String @id @default(uuid())
  adminId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName    String
  email       String
  phoneNum    String
  subject     String
  description String
  isDeleted   Boolean @default(false)
  isRead      Boolean @default(false)

  byAdmin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

// DashBoard

model AppSettings {
  id      String @id @default(uuid())
  adminId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hotelName   String
  logo        String
  address     String
  phoneNum    String
  email       String
  socialMedia Json

  admin   Admin?        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  sliders HomeSliders[]
  mainVid PromotionVid?
}

model HomeSliders {
  id      String @id @default(uuid())
  adminId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo     String
  header    String
  paragraph String
  isDeleted Boolean @default(false)

  byAdmin AppSettings @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model PromotionVid {
  id      String @id @default(uuid())
  adminId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video       String
  description String

  byAdmin AppSettings @relation(fields: [adminId], references: [id], onDelete: Cascade)
}
